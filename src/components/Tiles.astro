---
import Tile from "./Tile.astro";
import convex from "../lib/convex";
import { api } from "../../convex/_generated/api";
import type { Doc } from "convex/_generated/dataModel";
import { getStore } from "~/utils/blob-store";
import type { ListResult } from "~/types/upload";

interface Props {
  gallery: Doc<"galleries">;
  class?: string;
}

const { gallery, class: className } = Astro.props;

// Get all uploaded images for this gallery
const uploadsStore = getStore("file-uploads");
const uploads = await uploadsStore.list({
  prefix: `${gallery.slug}/`,
}) as ListResult;

// Create a map of image URLs to their thumbnail URLs
const thumbMap = new Map<string, string>();
for (const blob of uploads.blobs) {
  if (blob.key.includes('/thumb/')) {
    // Extract the original image name from the thumbnail path
    const originalName = blob.key.split('/thumb/')[1];
    const originalKey = `${gallery.slug}/${originalName}`;
    thumbMap.set(originalKey, blob.key);
  }
}

console.log(gallery.layout);
---

<div class="tiles-container">
  <!-- <h1 class="gallery-title">{gallery.title}</h1> -->
  <!-- {gallery.description && <p class="gallery-description">{gallery.description}</p>} -->
  <div class={`tiles-grid ${className}`}>
    {
      gallery.layout.map((tile: { id: string; imageUrl: string; x: number; y: number; w: number; h: number; description?: string; }) => (
        <div
          class="tile-wrapper"
          style={`
            grid-column: ${tile.x + 1} / span ${tile.w};
            grid-row: ${tile.y + 1} / span ${tile.h};
          `}
        >
          <Tile
            tile={tile}
            thumbUrl={tile.imageUrl ? thumbMap.get(tile.imageUrl) : undefined}
          />
        </div>
      ))
    }
  </div>
</div>

<style>
  @reference "tailwindcss";

  .tiles-container {
    @apply w-full px-4 min-h-[62vh];
  }

  .gallery-title {
    @apply text-3xl font-bold mb-2;
  }

  .gallery-description {
    @apply text-gray-600 mb-8;
  }

  .tiles-grid {
    display: grid;
    grid-template-columns: repeat(12, calc((100vw - 32px) / 12));
    grid-auto-rows: calc((100vw - 32px) / 12);
  }
  @media (max-width: 768px) {
    .responsive-grid.tiles-grid  {
      @apply flex flex-col;
    }
  }
  

  .tile-wrapper {
    @apply w-full h-full p-1 md:p-2 relative overflow-hidden;
    @apply opacity-0 translate-y-5;
    @apply transition-all duration-600;

    &.animate {
      @apply opacity-100 translate-y-0;
    }
  }
</style>

<script>
  // Define the Intersection Observer
  const observer = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target.querySelector(
            ".util-image"
          ) as HTMLImageElement;

          if (!img || img.complete) {
            entry.target.classList.add("animate");
          } else {
            // Otherwise wait for load
            img.addEventListener("load", () => {
              entry.target.classList.add("animate");
            });
          }
          observer.unobserve(entry.target);
        }
      });
    },
    {
      rootMargin: "0px",
      threshold: 0,
    }
  );

  // Observe elements with the `util-image` class
  document.querySelectorAll(".tile-wrapper").forEach((target) => {
    observer.observe(target);
  });
</script>
