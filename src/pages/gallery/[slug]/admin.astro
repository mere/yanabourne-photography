---
import Layout from "~/layouts/Layout.astro";
import Header from "../../../react/Header";
import { getStore } from "~/utils/blob-store";
import type { Gallery, GalleryTile } from "~/types/gallery";
import Hero from "~/components/Hero.astro";
import type { UploadWithStatus, ListResult } from "~/types/upload";
import { GalleryAdmin } from "~/react/GalleryAdmin";

export const prerender = false;

// Get admin secret from cookie
const cookies = Astro.request.headers.get("cookie")?.split(";") || [];
const adminSecretCookie = cookies.find((cookie) =>
  cookie.trim().startsWith("admin_secret=")
);
const adminSecret = adminSecretCookie ? adminSecretCookie.split("=")[1] : null;

// Check if user is authorized
if (!adminSecret || adminSecret !== import.meta.env.ADMIN_SECRET) {
  return Astro.redirect("/");
}

console.log(Astro.params);
const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect("/404");
}

// Get gallery data
const galleriesStore = getStore("galleries");
const gallery = (await galleriesStore.get(`gallery/${slug}`, {
  type: "json",
})) as Gallery;
if (!gallery) {
  return Astro.redirect("/404");
}

// Create a set of all used image URLs
const usedImageUrls = new Set<string>(
  gallery.layout.map((tile: GalleryTile) => tile.imageUrl)
);

console.log("Used image URLs:", Array.from(usedImageUrls));

// Get all uploaded images for this gallery
const uploadsStore = getStore("file-uploads");
const uploads = (await uploadsStore.list({
  prefix: `${gallery.slug}/`,
})) as ListResult;

console.log(
  "All uploads:",
  uploads.blobs.map((b) => b.key)
);

// Process uploads in smaller batches to avoid connection timeouts
const batchSize = 10;
const uploadsWithStatus: UploadWithStatus[] = [];

for (let i = 0; i < uploads.blobs.length; i += batchSize) {
  const batch = uploads.blobs.slice(i, i + batchSize);
  const batchPromises = batch.map(
    async (blob: { key: string; metadata?: any }) => {
      const rawMetadata = await uploadsStore.getMetadata(blob.key);
      console.log("Raw metadata for", blob.key, ":", rawMetadata);

      const metadata =
        typeof rawMetadata === "string" ? JSON.parse(rawMetadata) : rawMetadata;
      console.log("Parsed metadata for", blob.key, ":", metadata);

      const defaultMetadata = {
        size: 0,
        lastModified: new Date(0),
        type: "unknown",
      };
      const validMetadata = metadata || defaultMetadata;
      console.log("Valid metadata for", blob.key, ":", validMetadata);

      // Check if this is a thumbnail by both metadata and path
      const isThumbnail =
        validMetadata.isThumbnail || blob.key.includes("/thumb/");
      console.log("Is thumbnail check for", blob.key, ":", {
        fromMetadata: validMetadata.isThumbnail,
        fromPath: blob.key.includes("/thumb/"),
        final: isThumbnail,
      });

      // If it's a thumbnail, get the original image name and check if it's used
      let isUsed = usedImageUrls.has(blob.key);
      if (isThumbnail) {
        const originalName = blob.key.replace("/thumb/", "/");
        isUsed = usedImageUrls.has(originalName);
        console.log("Thumbnail check:", {
          thumbnail: blob.key,
          original: originalName,
          isUsed,
          usedUrls: Array.from(usedImageUrls),
        });
      }

      return {
        key: blob.key,
        name: blob.key.split("/").pop() || "",
        size: validMetadata.size || 0,
        lastModified: validMetadata.lastModified
          ? new Date(validMetadata.lastModified)
          : new Date(0),
        type: validMetadata.type || "unknown",
        isUsed,
        isThumbnail,
        metadata: validMetadata,
      };
    }
  );

  const batchResults = await Promise.all(batchPromises);
  uploadsWithStatus.push(...batchResults);
}

// Filter out thumbnails and used images, sort by last modified
const unusedImages = uploadsWithStatus
  .filter((upload) => !upload.isThumbnail && !upload.isUsed)
  .sort((a, b) => b.lastModified.getTime() - a.lastModified.getTime());

console.log(
  "Unused images:",
  unusedImages.map((u) => ({
    key: u.key,
    isThumbnail: u.isThumbnail,
    isUsed: u.isUsed,
  }))
);
---

<Layout title={`Admin - ${gallery.title}`} id="admin">
  <Header client:load />
  <Hero title={`Admin - ${gallery.title}`} />
  <GalleryAdmin
    client:only="react"
    gallery={gallery}
    uploadsWithStatus={uploadsWithStatus}
    unusedImages={unusedImages}
  />
</Layout>
