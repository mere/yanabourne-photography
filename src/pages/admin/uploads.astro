---
import Layout from '../../layouts/Layout.astro';
import Header from '../../react/Header';
import { getStore } from '~/utils/blob-store';
import type { Gallery, GalleryTile } from '~/types/gallery';
import Hero from '~/components/Hero.astro';
import AnimatedImage from '~/components/AnimatedImage.astro';

export const prerender = false;

// Get admin secret from cookie
const cookies = Astro.request.headers.get('cookie')?.split(';') || [];
const adminSecretCookie = cookies.find(cookie => cookie.trim().startsWith('admin_secret='));
const adminSecret = adminSecretCookie ? adminSecretCookie.split('=')[1] : null;

// Check if user is authorized
if (!adminSecret || adminSecret !== import.meta.env.ADMIN_SECRET) {
  return Astro.redirect('/');
}

// Get all galleries to check for used images
const galleriesStore = getStore('galleries');
const { blobs: galleryBlobs } = await galleriesStore.list({
  prefix: 'gallery/',
});

// Get all uploaded images
const uploadsStore = getStore('file-uploads');
const { blobs: uploadBlobs } = await uploadsStore.list();

// Parse gallery data to get used images
const galleries = await Promise.all(
  galleryBlobs.map(async (blob: { key: string }) => {
    const data = await galleriesStore.get(blob.key, { type: 'json' }) as Gallery;
    return data;
  })
);

// Create a set of all used image URLs
const usedImageUrls = new Set<string>();
galleries.forEach((gallery: Gallery) => {
  gallery.layout.forEach((tile: GalleryTile) => {
    if (tile.imageUrl) {
      usedImageUrls.add(tile.imageUrl);
    }
  });
});

// Process uploads to identify unused images
interface UploadWithStatus {
  key: string;
  lastModified: number;
  metadata: {
    slug: string;
    name: string;
    type: string;
    size: number;
  };
  isUsed: boolean;
}

const uploads = await Promise.all(
  uploadBlobs.map(async (blob: { key: string; lastModified: number; metadata: any }) => {
    const isUsed = usedImageUrls.has(blob.key);
    return {
      ...blob,
      isUsed
    } as UploadWithStatus;
  })
);

// Sort uploads by last modified date
uploads.sort((a: UploadWithStatus, b: UploadWithStatus) => b.lastModified - a.lastModified);

// Count unused images
const unusedCount = uploads.filter(upload => !upload.isUsed).length;
---

<Layout title="Admin - Uploads" id="admin">
  <Header client:load />
  <Hero title="Admin - Uploads" />
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8 flex justify-between items-center">
      <a href="/admin" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
        Back to Admin
      </a>
      {unusedCount > 0 && (
        <button
          class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
          onclick={`if(confirm('Are you sure you want to delete all ${unusedCount} unused images? This action cannot be undone.')) {
            fetch('/api/delete-unused-uploads', { method: 'DELETE' })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  window.location.reload();
                } else {
                  alert('Failed to delete unused images');
                }
              });
          }`}
        >
          Delete All Unused ({unusedCount})
        </button>
      )}
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {uploads.map((upload: UploadWithStatus) => (
        <div class={`bg-white shadow rounded-lg overflow-hidden ${!upload.isUsed ? 'border-2 border-red-500' : ''}`}>
          <div class="relative aspect-square">
            <AnimatedImage
              src={upload.key as any}
              alt={upload.metadata?.name}
            />
            {!upload.isUsed && (
              <div class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded text-sm">
                Unused
              </div>
            )}
          </div>
          <div class="p-4">
            <h2 class="text-lg font-semibold mb-2 truncate" title={upload.metadata?.name}>
              {upload.metadata?.name}
            </h2>
            <p class="text-gray-600 text-sm mb-1 truncate" title={upload.metadata?.slug}>
              Gallery: {upload.metadata?.slug}
            </p>
            <p class="text-gray-500 text-sm mb-1">
              {(upload.metadata?.size / 1024 / 1024).toFixed(2)} MB
            </p>
            <p class="text-gray-500 text-sm mb-3">
              {new Date(upload.lastModified).toLocaleString()}
            </p>
            <button
              class="w-full bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"
              onclick={`if(confirm('Are you sure you want to delete this image?')) {
                fetch('/api/delete-upload?key=${upload.key}', { method: 'DELETE' })
                  .then(response => response.json())
                  .then(data => {
                    if (data.success) {
                      window.location.reload();
                    } else {
                      alert('Failed to delete image');
                    }
                  });
              }`}
            >
              Delete
            </button>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout> 